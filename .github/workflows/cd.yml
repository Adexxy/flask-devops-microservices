name: Deploy to Cloud

on:
  push:
    paths:
      - 'continuous-deployment/**'
    branches: [ "main" ]
  pull_request:
    paths:
      - 'continuous-deployment/**'
    branches: [ "main" ]
  workflow_dispatch:
  # This is for manual triggering of the workflow with inputs on the GitHub UI
    inputs:
      target:
        description: "Choose deployment target"
        required: true
        default: "eks"
        type: choice
        options:
          - generic
          - eks
          - ecs
      registry:
        description: "Push to which registry?"
        required: true
        default: "ecr"
        type: choice
        options:
          - dockerhub
          - ecr

jobs:
  deploy:
    name: Deploy based on input
    runs-on: ubuntu-latest

    env:
      REGISTRY: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.registry || 'ecr' }}
      TARGET: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.target || 'eks' }}
      # KUBECONFIG: ${{ secrets.KUBECONFIG }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      ECS_SERVICE_NAMES: ${{ secrets.ECS_SERVICE_NAMES }}
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      IMAGE_TAG: latest   # ${{ github.sha }}
      HELM_RELEASE: my-release
      HELM_NAMESPACE: flask-microservices
      # KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      ########################################
      # Set up Helm (for K8s and EKS)
      ########################################
      - name: Set up Helm
        run: |
          HELM_VERSION="v3.12.3"
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          bash get_helm.sh --version $HELM_VERSION
          rm -f get_helm.sh

      ########################################
      # Generic Kubernetes Deployment
      ########################################

      - name: Set up kubeconfig for generic cluster
        if: env.TARGET == 'generic'
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to generic Kubernetes
        if: env.TARGET == 'generic'
        run: |
          helm upgrade --install $HELM_RELEASE \
            ./continuous-deployment/helm-charts/microservices \
            --namespace $HELM_NAMESPACE \
            --create-namespace \
            --set postgres.storageClass=gp2-csi \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --wait

      ########################################
      # EKS Deployment
      ########################################
      - name: Configure AWS credentials (for EKS and ECS)
        if: env.TARGET == 'eks' || env.TARGET == 'ecs'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install/Update AWS CLI v2
        if: env.TARGET == 'eks' || env.TARGET == 'ecs'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Update kubeconfig for EKS
        if: env.TARGET == 'eks'
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Debug AWS identity
        run: aws sts get-caller-identity

      - name: Debug kubeconfig
        run: |
          kubectl config current-context
          kubectl config get-contexts
          kubectl get nodes
          kubectl get configmap aws-auth -n kube-system -o yaml


      - name: Deploy to EKS
        if: env.TARGET == 'eks'
        run: |
          IMAGE_REPO="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          echo "Deploying $HELM_RELEASE with image: $IMAGE_REPO:$IMAGE_TAG"         
          helm upgrade --install "$HELM_RELEASE" \
            ./continuous-deployment/helm-charts/microservices \
            --namespace "$HELM_NAMESPACE" \
            --create-namespace \
            --set image.repository="$IMAGE_REPO" \
            --set image.tag="$IMAGE_TAG" \

      - name: Confirm EKS deployment
        if: env.TARGET == 'eks'
        run: |
          kubectl get pods -n "$HELM_NAMESPACE"
          kubectl get events -n "$HELM_NAMESPACE" --sort-by=.metadata.creationTimestamp

      ########################################
      # ECS Deployment
      ########################################

      - name: Update ECS services
        if: env.TARGET == 'ecs'
        run: |
          IFS=',' read -ra SERVICES <<< "${{ secrets.ECS_SERVICE_NAMES }}"
          for svc in "${SERVICES[@]}"; do
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
              --service "$svc" \
              --force-new-deployment \
              --desired-count 1 \
              --deployment-configuration maximumPercent=200,minimumHealthyPercent=100
          done

      ########################################
      # Install NGINX Ingress Controller (if not exists)
      # This is only for EKS, as generic Kubernetes may not require it and ECS do not require this step
      ########################################

      # - name: Install NGINX Ingress Controller (if not exists)
      #   if: env.TARGET == 'eks'
      #   run: |
      #     if ! kubectl get ns ingress-nginx &>/dev/null; then
      #       echo "Installing ingress-nginx..."
      #       helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      #       helm repo update
      #       helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
      #         --namespace ingress-nginx --create-namespace \
      #         --set controller.publishService.enabled=true
      #     else
      #       echo "Ingress-nginx already installed."
      #     fi

      ########################################
      # Get Ingress Controller External DNS
      # This is only for EKS, as generic Kubernetes may not require it and ECS do not require this step
      ########################################
      
      - name: Get Ingress Controller External DNS
        if: env.TARGET == 'eks'
        run: |
          echo "Retrieving NGINX Ingress Controller external hostname..."
          kubectl get svc -n ingress-nginx ingress-nginx-controller \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'





